using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.InputSystem;
using System;
using Unity.VisualScripting;

public class GameInput : MonoBehaviour
{
    public static GameInput Instance {  get; private set; }

    private const string PLAYER_PREFS_BINDINGS = "InputBindings";
    //Interaction event using a delegate type. 
    public event EventHandler OnInteractAction;
    //Interaction eventhandler for cutting 
    public event EventHandler OnInteractAlternateAction;

    public event EventHandler OnBindingRebind;

    //contstruct the script class that was autogenerated. 
    private PlayerInputActions playerInputActions;

    //function to get the bindings
    public enum Binding
    {
        Move_Up, Move_Down, Move_Left, Move_Right, Interact, InteractAlternate, Pause,
    }
   

    public event EventHandler OnPauseAction;


    private void Awake()     
    {

        Instance = this;

        //create an object of the type player
        playerInputActions = new PlayerInputActions();
        //check if the player prefs are saved. 
        if (PlayerPrefs.HasKey(PLAYER_PREFS_BINDINGS))
        {
            playerInputActions.LoadBindingOverridesFromJson(PlayerPrefs.GetString(PLAYER_PREFS_BINDINGS));
        }

        playerInputActions.Player.Enable();

        //interacting 
        playerInputActions.Player.Interact.performed += Interact_performed;// not calling the function but passing it as a refrence. 
        playerInputActions.Player.InteractAlternate.performed += InteractAlternate_performed;
        playerInputActions.Player.Pause.performed += Pause_performed;


        
    }
    private void OnDestroy()
    {   
        //Unsubscribing to the event
        playerInputActions.Player.Interact.performed -= Interact_performed;// not calling the function but passing it as a refrence. 
        playerInputActions.Player.InteractAlternate.performed -= InteractAlternate_performed;
        playerInputActions.Player.Pause.performed -= Pause_performed;

        playerInputActions.Dispose();
    }

    private void Pause_performed(InputAction.CallbackContext obj)
    {
        OnPauseAction?.Invoke(this, EventArgs.Empty); 
    }

    private void InteractAlternate_performed(InputAction.CallbackContext obj)
    {
        OnInteractAlternateAction?.Invoke(this, EventArgs.Empty);
    }

    // when the player presses the interact action, it will cal this event. 
    private void Interact_performed(InputAction.CallbackContext obj)
    {
        //ask if there are listners is one options (Using an if statment)
        //using ? is a null onditional operator. It basically operates from the right, when it gets to a question mark,
        //it will evaluate the left side and if it is null it will not throw errors
        //invoke is her e because a question mark cannot call a function. 
        OnInteractAction?.Invoke(this, EventArgs.Empty);

    }

    // Start is called once before the first execution of Update after the MonoBehaviour is created
    public Vector2 GetMovementVector()
    {
        //this reads the vector2 that was made in the Player Action Map and can be used in the script
        Vector2 inputVector = playerInputActions.Player.Move.ReadValue<Vector2>();

        //you can also normalize the code through the PlayerInputAvtions menue
        //normalize the vector to ensure consistent speed
        inputVector = inputVector.normalized;

        return inputVector;
    }

    public string GetBindingText(Binding binding )
    {
        switch (binding)
        {
            default: 
            case Binding.Move_Up:
                return playerInputActions.Player.Move.bindings[1].ToDisplayString();
            case Binding.Move_Down:
                return playerInputActions.Player.Move.bindings[2].ToDisplayString();
            case Binding.Move_Left:
                return playerInputActions.Player.Move.bindings[3].ToDisplayString(); ;
            case Binding.Move_Right:
                return playerInputActions.Player.Move.bindings[4].ToDisplayString(); ;
            case Binding.Interact:
               return playerInputActions.Player.Interact.bindings[0].ToDisplayString(); 
            case Binding.InteractAlternate:
                return playerInputActions.Player.InteractAlternate.bindings[0].ToDisplayString();
            case Binding.Pause:
                return playerInputActions.Player.Pause.bindings[0].ToDisplayString();
        }

    }
    //functionto rebind a bining. 
    public void RebindBinding(Binding binding, Action onActionRebound) {
        playerInputActions.Player.Disable();

        InputAction inputAction;
        int bindingIndex; 
        switch (binding)
        {
            default:
            case Binding.Move_Up:
                inputAction = playerInputActions.Player.Move; 
                bindingIndex = 1;
                break;
            case Binding.Move_Down:
                inputAction = playerInputActions.Player.Move;
                bindingIndex = 2;
                break;
            case Binding.Move_Left:
                inputAction = playerInputActions.Player.Move;
                bindingIndex = 3;
                break;
            case Binding.Move_Right:
                inputAction = playerInputActions.Player.Move;
                bindingIndex = 4;
                break;
            case Binding.Interact:
                inputAction = playerInputActions.Player.Interact;
                bindingIndex = 0;
                break;
            case Binding.InteractAlternate:
                inputAction = playerInputActions.Player.InteractAlternate;
                bindingIndex = 0;
                break;
            case Binding.Pause:
                inputAction = playerInputActions.Player.Pause;
                bindingIndex = 0;
                break;
        }

        inputAction.PerformInteractiveRebinding(bindingIndex)
            .OnComplete(callback => {
                callback.Dispose();
                playerInputActions.Player.Enable();
                onActionRebound(); 

                //to save keyBinding 
                PlayerPrefs.SetString(PLAYER_PREFS_BINDINGS, playerInputActions.SaveBindingOverridesAsJson());
                PlayerPrefs.Save(); 

                OnBindingRebind?.Invoke(this, EventArgs.Empty); 

            } )
            .Start();
            

    }
}
